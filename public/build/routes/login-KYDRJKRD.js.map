{
  "version": 3,
  "sources": ["browser-route-module:C:\\Users\\91754\\Desktop\\Todo-Re\\app\\routes\\login.tsx?browser", "../../../app/routes/login.tsx", "../../../node_modules/jwt-decode/lib/atob.js", "../../../node_modules/jwt-decode/lib/base64_url_decode.js", "../../../node_modules/jwt-decode/lib/index.js"],
  "sourcesContent": ["export { default, links } from \"C:\\\\Users\\\\91754\\\\Desktop\\\\Todo-Re\\\\app\\\\routes\\\\login.tsx\";", "import { json, LinksFunction, redirect } from \"remix\";\r\nimport {\r\n  useSearchParams,\r\n  ActionFunction,\r\n  useActionData,\r\n  LoaderFunction,\r\n} from \"remix\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport styleUrl from \"~/styles/login.css\";\r\nimport { db } from \"~/utils/db.server\";\r\nimport {\r\n  createUserSession,\r\n  login,\r\n  getUserId,\r\n  register,\r\n  loginWithGoogle,\r\n} from \"~/utils/session.server\";\r\nimport { useState } from \"react\";\r\n\r\nexport const links: LinksFunction = () => {\r\n  return [{ rel: \"stylesheet\", href: styleUrl }];\r\n};\r\ntype ActionData = {\r\n  formError?: string;\r\n  nameError?: string | undefined;\r\n  passwordError?: string | undefined;\r\n  fields?: {\r\n    loginType: string;\r\n    name: string;\r\n    password: string;\r\n  };\r\n};\r\nconst badRequest = (data: ActionData) => {\r\n  return json(data, { status: 400 });\r\n};\r\nexport const loader: LoaderFunction = async ({ request }) => {\r\n  const userId = await getUserId(request);\r\n  if (userId) {\r\n    return redirect(\"/todo\");\r\n  }\r\n  return null;\r\n};\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  const handleLogin = async (fields: {\r\n    name: string;\r\n    password: string;\r\n    loginType: string;\r\n    redirectTo: string;\r\n  }) => {\r\n    switch (fields.loginType) {\r\n      case \"login\": {\r\n        const user = await login({\r\n          username: fields.name,\r\n          password: fields.password,\r\n        });\r\n        if (!user)\r\n          return badRequest({ fields, formError: \"Wrong username/passowrd\" });\r\n        return createUserSession(user.id, fields.redirectTo);\r\n      }\r\n      case \"register\": {\r\n        const userExists = await db.user.findFirst({\r\n          where: { username: fields.name },\r\n        });\r\n        if (userExists) {\r\n          return badRequest({ fields, formError: \"Username already exists\" });\r\n        }\r\n        const user = await register({\r\n          username: fields.name,\r\n          password: fields.password,\r\n        });\r\n        if (!user) {\r\n          return badRequest({\r\n            fields,\r\n            formError: `Something went wrong trying to create a new user.`,\r\n          });\r\n        }\r\n        return createUserSession(user.id, fields.redirectTo);\r\n      }\r\n      default: {\r\n        return badRequest({\r\n          fields,\r\n          formError: \"Login type invalid\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const CLIENT_ID =\r\n    \"600930389454-sjq229oum7ar99jqt9nreutq4r4j8bbk.apps.googleusercontent.com\";\r\n  const form = await request.formData();\r\n  const credential = form.get(\"credential\");\r\n  const loginType = form.get(\"loginType\");\r\n  const name = form.get(\"username\");\r\n  const password = form.get(\"password\");\r\n  const redirectTo = form.get(\"redirectTo\") || \"/todo\";\r\n  //Checking for google sign in\r\n  if (credential != null) {\r\n    if (typeof credential !== \"string\" || typeof redirectTo !== \"string\")\r\n      return badRequest({ formError: \"Google sign in TypeError\" });\r\n    const decoded: any = jwtDecode(credential);\r\n    console.log(decoded);\r\n    if (\r\n      (decoded.iss === \"https://accounts.google.com\" ||\r\n        decoded.iss === \"accounts.google.com\") &&\r\n      decoded.aud === CLIENT_ID\r\n    ) {\r\n      const user = await loginWithGoogle({\r\n        username: decoded.sub + decoded.name,\r\n        password: decoded.sub,\r\n      });\r\n      if (!user)\r\n        return badRequest({ formError: \"Google sign in failed in Login\" });\r\n      return createUserSession(user.id, redirectTo);\r\n    } else return badRequest({ formError: \"Google sign in auth failed\" });\r\n  }\r\n  //Checking for Form sign\r\n  //Filter : 1 Typesafety\r\n  if (\r\n    typeof loginType !== \"string\" ||\r\n    typeof name !== \"string\" ||\r\n    typeof password !== \"string\" ||\r\n    typeof redirectTo !== \"string\"\r\n  ) {\r\n    return badRequest({ formError: \"Form not submitted correctly\" });\r\n  }\r\n  //Filter : 2 Invalid username and password\r\n  if (name.length < 3) return badRequest({ nameError: \"Invalid name\" });\r\n  if (password.length < 6)\r\n    return badRequest({ passwordError: \"Invalid password\" });\r\n  const fields = { name, password, loginType, redirectTo };\r\n  //Login or Register\r\n  return handleLogin(fields);\r\n};\r\n\r\nexport default function Login() {\r\n  const actionData = useActionData<ActionData>();\r\n  const [loginType, updateLoginType] = useState(\"register\");\r\n  const [searchParams] = useSearchParams();\r\n  const toggleLoginType = () => {\r\n    if (loginType === \"register\") updateLoginType(\"login\");\r\n    else updateLoginType(\"register\");\r\n  };\r\n  return (\r\n    <>\r\n      <script src=\"https://accounts.google.com/gsi/client\" async defer></script>\r\n\r\n      <div className=\"login-container\">\r\n        <div className=\"content\">\r\n          <div\r\n            id=\"g_id_onload\"\r\n            data-client_id=\"600930389454-sjq229oum7ar99jqt9nreutq4r4j8bbk.apps.googleusercontent.com\"\r\n            data-login_uri=\"https://todo-remix-tj.netlify.app/login\"\r\n            data-auto_prompt=\"false\"\r\n          ></div>\r\n          <div\r\n            className=\"g_id_signin\"\r\n            data-type=\"standard\"\r\n            data-size=\"large\"\r\n            data-theme=\"outline\"\r\n            data-text=\"continue_with\"\r\n            data-shape=\"rectangular\"\r\n            data-logo_alignment=\"left\"\r\n          ></div>\r\n          <p>or</p>\r\n          {actionData?.formError && <h2>{actionData?.formError}</h2>}\r\n          {actionData?.nameError && <h2>{actionData?.nameError}</h2>}\r\n          {actionData?.passwordError && <h2>{actionData?.passwordError}</h2>}\r\n          <form method=\"post\">\r\n            <input\r\n              type=\"hidden\"\r\n              name=\"redirectTo\"\r\n              value={searchParams.get(\"redirectTo\") ?? undefined}\r\n            />\r\n            <input type=\"hidden\" name=\"loginType\" value={loginType} />\r\n            <div className=\"input-fields\">\r\n              <div className=\"input-field\">\r\n                <input\r\n                  placeholder=\"Name\"\r\n                  type=\"text\"\r\n                  defaultValue={actionData?.fields?.name}\r\n                  id=\"username-input\"\r\n                  name=\"username\"\r\n                />\r\n              </div>\r\n              <div className=\"input-field\">\r\n                <label htmlFor=\"password-input\">Password</label>\r\n                <input\r\n                  id=\"password-input\"\r\n                  defaultValue={actionData?.fields?.password}\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                />\r\n              </div>\r\n              <button type=\"submit\">Submit</button>\r\n            </div>\r\n          </form>\r\n          <p>\r\n            Already have an account ?{\" \"}\r\n            <button style={{ color: \"#3a0d55\" }} onClick={toggleLoginType}>\r\n              Login\r\n            </button>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n", "/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction InvalidCharacterError(message) {\n    this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = \"InvalidCharacterError\";\n\nfunction polyfill(input) {\n    var str = String(input).replace(/=+$/, \"\");\n    if (str.length % 4 == 1) {\n        throw new InvalidCharacterError(\n            \"'atob' failed: The string to be decoded is not correctly encoded.\"\n        );\n    }\n    for (\n        // initialize result and counters\n        var bc = 0, bs, buffer, idx = 0, output = \"\";\n        // get next character\n        (buffer = str.charAt(idx++));\n        // character found in table? initialize bit storage and add its ascii value;\n        ~buffer &&\n        ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4) ?\n        (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) :\n        0\n    ) {\n        // try to find character in table (0-63, not found => -1)\n        buffer = chars.indexOf(buffer);\n    }\n    return output;\n}\n\nexport default (typeof window !== \"undefined\" &&\n    window.atob &&\n    window.atob.bind(window)) ||\npolyfill;", "import atob from \"./atob\";\n\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(\n        atob(str).replace(/(.)/g, function(m, p) {\n            var code = p.charCodeAt(0).toString(16).toUpperCase();\n            if (code.length < 2) {\n                code = \"0\" + code;\n            }\n            return \"%\" + code;\n        })\n    );\n}\n\nexport default function(str) {\n    var output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw \"Illegal base64url string!\";\n    }\n\n    try {\n        return b64DecodeUnicode(output);\n    } catch (err) {\n        return atob(output);\n    }\n}", "\"use strict\";\n\nimport base64_url_decode from \"./base64_url_decode\";\n\nexport function InvalidTokenError(message) {\n    this.message = message;\n}\n\nInvalidTokenError.prototype = new Error();\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\n\nexport default function(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified\");\n    }\n\n    options = options || {};\n    var pos = options.header === true ? 0 : 1;\n    try {\n        return JSON.parse(base64_url_decode(token.split(\".\")[pos]));\n    } catch (e) {\n        throw new InvalidTokenError(\"Invalid token specified: \" + e.message);\n    }\n}"],
  "mappings": "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",
  "names": []
}
